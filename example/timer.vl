<?xml version="1.0" encoding="UTF-8"?>
<vl:BLOCK name="timer">
    <!-- The BLOCK element denotes a subsystem of parts -->
    <!-- All "parts" added by the user can use Inputs and/or
         Outputs for utilization elsewhere in project. The
         reference will search the path for that file -->
    <!-- All Inputs do not have to be used and will be optimized out -->
    <vl:INPUT name="start" datatype="boolean"/>
    <vl:INPUT name="reset" datatype="boolean"/>
    <vl:INPUT name="time" datatype="single"/>
    <!-- Constants can be defined as a seperate block as well -->
    <vl:CONSTANT name="zero_constant" datatype="single" value="0.000"/>
    <!-- The DT block puts out the difference in time between
         successive passes of program. In a Soft RTOS, this
         would be a variable number. In a Hard RTOS, this
         would be a constant number. Here, we are saying the
         module will run around 10Hz, or 100ms (0.1 s).
         The DT module needs an initializer to guess the value
         on the first pass, but will be updated every pass afterwards -->
    <vl:DT name="time_since_last_pass" ic="0.100"/>
    <vl:NOT name="count_not_expired">
        <vl:CONNECTION to="input" from="count_expired_lp"/>
    </vl:NOT>
    <vl:AND name="start_enb">
        <vl:CONNECTION to="input1" from="start"/>
        <vl:CONNECTION to="input2" from="count_not_expired"/>
    </vl:AND>
    <vl:IF name="increment_value" datatype="single">
    <!-- Control flow IF switch: If Control is true, execute
         True assignment, else execute False assignment -->
        <vl:CONNECTION to="control" from="start_enb"/>
        <vl:CONNECTION to="true" from="time_since_last_pass"/>
        <vl:CONNECTION to="false" from="zero_constant"/>
    </vl:IF>
    <vl:SUM name="summer" datatype="single">
    <!-- The summer will add all the inputs together. If you want
         add a negative number, use the NEG part to negate the
         signal before connecting to this part. -->
    <!-- Additionally, the PROD part exists for taking the PI
         product of a set of inputs, and the INV command for taking
         the recipicral of a number (divide by zero runtime error
         is partially mitgated, but unexpected operation may occur) -->
        <vl:CONNECTION to="input1" from="increment_value"/>
        <vl:CONNECTION to="input2" from="elapsed_time_lp"/>
    </vl:SUM>
    <vl:IF name="reset_switch" datatype="single">
        <vl:CONNECTION to="control" from="reset"/>
        <vl:CONNECTION to="true" from="zero_constant"/>
        <vl:CONNECTION to="false" from="summer"/>
    </vl:IF>
    <vl:COMPARE name="is_count_expired" datatype="single" operation=">=">
        <vl:CONNECTION to="lhs" from="elapsed_time"/>
        <vl:CONNECTION to="rhs" from="time"/>
    </vl:COMPARE>
    <vl:MEM name="elapsed_time_lp" datatype="single" ic="0.000" >
        <vl:CONNECTION to="current" from="elapsed_time"/>
    </vl:MEM>
    <vl:MEM name="count_expired_lp" datatype="boolean" ic="false">
        <vl:CONNECTION to="current" from="count_expired"/>
    </vl:MEM>
    <!-- All Outputs need to have a connection in the part,
         at least to a constant -->
    <vl:OUTPUT name="count_expired" datatype="boolean">
    <!-- Outputs of a subsystem need to have a connection specified -->
        <vl:CONNECTION to="count_expired" from="is_count_expired"/>
    </vl:OUTPUT>
    <vl:OUTPUT name="elapsed_time" datatype="single">
        <vl:CONNECTION to="elapsed_time" from="reset_switch"/>
    </vl:OUTPUT>
</vl:BLOCK>
